include:
  - template: Jobs/Dependency-Scanning.latest.gitlab-ci.yml
  - template: Jobs/Secret-Detection.latest.gitlab-ci.yml
  - template: Jobs/Container-Scanning.latest.gitlab-ci.yml
  - template: Jobs/SAST-IaC.latest.gitlab-ci.yml
  - project: 'gitlab-org/quality/pipeline-common'
    file:
      - '/ci/danger-review.yml'

stages:
  - test
  - upload
  - container_scan

danger-review:
  variables:
    GITLAB_DANGERFILES_VERSION: "~> 3.0"

#################################
##            RULES            ##
#################################

.on_merge_request_and_merged_events:
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_PIPELINE_SOURCE == "merge_request_event"'

.on_merge_request_and_merged_events_except_schedule_and_tag:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_COMMIT_TAG'
      when: never
    - !reference [.on_merge_request_and_merged_events, rules]

.on_default_branch:
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

.on_tag_events:
  rules:
    - if: '$CI_COMMIT_TAG'

#################################
##            SAST             ##
#################################

gemnasium-dependency_scanning:
  rules:
    - !reference [.on_merge_request_and_merged_events, rules]

gemnasium-python-dependency_scanning:
  rules:
    - !reference [.on_merge_request_and_merged_events, rules]

secret_detection:
  rules:
    - !reference [.on_merge_request_and_merged_events, rules]
  allow_failure: false

container_scanning:
  stage: container_scan
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE:dev
    GIT_STRATEGY: fetch
  rules:
    - !reference [.on_default_branch, rules]

kics-iac-sast:
  rules:
    - !reference [.on_merge_request_and_merged_events, rules]
  allow_failure: false

#########################
##     Lint Checks     ##
#########################

check:terraform-fmt:
  stage: test
  image:
    name: "hashicorp/terraform"
    entrypoint: [ "" ]
  before_script:
    - terraform version
  script:
    - terraform fmt -check -recursive -diff .
  rules:
    - !reference [.on_merge_request_and_merged_events_except_schedule_and_tag, rules]

check:tflint:
  stage: test
  image:
    name: ghcr.io/terraform-linters/tflint:latest
    entrypoint: [""]
  script:
    - find terraform/modules/* -type d -prune -not -path templates -print0 | xargs -0 -n1 -I % sh -c "printf '\n%\n' && tflint -c .tflint.hcl %"
  rules:
    - !reference [.on_merge_request_and_merged_events_except_schedule_and_tag, rules]

check:ansible-lint:
  stage: test
  image: registry.gitlab.com/pipeline-components/ansible-lint:latest
  script:
    - chmod 700 ansible
    - cd ansible
    - ansible-galaxy install -r requirements/ansible-galaxy-requirements.yml
    - pip install jmespath
    - ansible-lint
  rules:
    - !reference [.on_merge_request_and_merged_events_except_schedule_and_tag, rules]
  retry: 2

check:markdownlint:
  stage: test
  image:
    name: node:lts-alpine3.14
    entrypoint: [ "" ]
  script:
    - npm add -g markdownlint markdownlint-cli
    - markdownlint *.md docs/*.md
  rules:
    - !reference [.on_merge_request_and_merged_events_except_schedule_and_tag, rules]

check:markdown-link-check:
  stage: test
  image:
    name: ghcr.io/tcort/markdown-link-check:3.11.0
    entrypoint: [""]
  script:
    - /src/markdown-link-check *.md docs/*.md
  rules:
    - !reference [.on_merge_request_and_merged_events_except_schedule_and_tag, rules]
  retry: 2

# Does the requirements.txt install?
check_requirements:
  stage: test
  image: python:3
  script:
    - python -m venv get-python-env
    - source ./get-python-env/bin/activate
    - pip install -r ansible/requirements/requirements.txt
    - ansible-galaxy install -r ansible/requirements/ansible-galaxy-requirements.yml
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - ansible/requirements/requirements.txt
        - ansible/requirements/ansible-galaxy-requirements.yml

########################
##      Packages      ##
########################

upload-terraform-module:
  stage: upload
  image: curlimages/curl:latest
  script:
    - cd terraform
    - tar -czf gitlab_environment_toolkit.tgz modules
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file gitlab_environment_toolkit.tgz "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/terraform/modules/gitlab-environment-toolkit/gitlab/${CI_COMMIT_TAG}/file"'
  rules:
    - !reference [.on_tag_events, rules]

.upload-docker-image-base:
  stage: upload
  image: alpine
  services:
    - docker:20-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
  before_script:
    - apk add -u --no-cache docker
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  tags:
    - docker

upload-docker-image-dev:
  extends: .upload-docker-image-base
  script:
    - docker build -t $CI_REGISTRY_IMAGE:dev .
    - docker push $CI_REGISTRY_IMAGE:dev
  rules:
    - !reference [.on_default_branch, rules]

upload-docker-image-release:
  extends: .upload-docker-image-base
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - |
      if echo $CI_COMMIT_TAG | grep -qv ".*beta.*"; then
        docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG $CI_REGISTRY_IMAGE:latest
        docker push $CI_REGISTRY_IMAGE:latest
      fi
  rules:
    - !reference [.on_tag_events, rules]
