roles ['monitoring_role']

external_url '{{ external_url_sanitised }}'

# Prometheus
prometheus['listen_address'] = '0.0.0.0:9090'
prometheus['monitor_kubernetes'] = false

prometheus['flags'] = {
   'storage.tsdb.retention.time' => "{{ prometheus_data_retention_period }}",
}

prometheus['scrape_configs'] = [
{% if monitor_prometheus_scrape_config_setup %}
{% if 'consul' not in groups %}
  {{ lookup('template', 'prometheus_scrape_configs/static_omnibus.rb.j2') | indent(width=2) }}
{% endif %}
  {{ lookup('template', 'prometheus_scrape_configs/static_omnibus_non_discoverable.rb.j2') | indent(width=2) }}
  {{ lookup('template', 'prometheus_scrape_configs/static_non_omnibus.rb.j2') | indent(width=2) }}
{% endif %}
  {{ monitor_custom_prometheus_scrape_config }}
]

prometheus['rules_files'] = [
  '/var/opt/gitlab/prometheus/rules/*.rules',
{% for item in monitor_custom_rules %}
  '/opt/prometheus/rules/{{ item.folder }}/*.rules',
{% endfor %}
]

# Grafana
grafana['env'] = {
  'GF_SERVER_ROOT_URL' => '{{ external_url_sanitised }}/-/grafana'
}

{% if grafana_password is defined and grafana_password != '' %}
grafana['admin_password'] = "{{ grafana_password | regex_escape() }}"
grafana['disable_login_form'] = false
{% endif %}

grafana['dashboards'] = [
  {
    'name' => 'GitLab Omnibus',
    'orgId' => 1,
    'folder' => 'GitLab Omnibus',
    'type' => 'file',
    'disableDeletion' => true,
    'updateIntervalSeconds' => 600,
    'options' => {
      'path' => '/opt/gitlab/embedded/service/grafana-dashboards',
    }
  },
  {
    'name' => 'GitLab Environment Toolkit',
    'orgId' => 1,
    'folder' => 'GitLab Environment Toolkit',
    'type' => 'file',
    'disableDeletion' => true,
    'updateIntervalSeconds' => 600,
    'options' => {
      'path' => '/opt/gitlab_environment_toolkit/dashboards',
    }
  },
{% for item in monitor_custom_dashboards %}
  {
    'name' => '{{ item.display_name }}',
    'orgId' => 1,
    'folder' => '{{ item.display_name }}',
    'type' => 'file',
    'disableDeletion' => true,
    'updateIntervalSeconds' => 600,
    'options' => {
      'path' => "/opt/{{ item.display_name | lower | replace(' ', '_') }}/dashboards",
    }
  },
{% endfor %}
]

{% if 'consul' in groups %}
# Consul Agent (Monitoring Auto Discovery)
consul['enable'] = true
consul['configuration'] = {
  bind_addr: '{{ ansible_default_ipv4.address }}',
  retry_join: %w({{ (consul_int_addrs | join(' ')) }})
}
consul['monitoring_service_discovery'] = true
{% endif %}

# Nginx
nginx['enable'] = true
nginx['status']['options'] = {
  "server_tokens" => "off",
  "access_log" => "off",
  "deny" => "all",
## Switch internal allow to IP as this is what Consul uses
## When not using Consul localhost is used by default
{% if 'consul' in groups %}
  "allow" => "{{ monitor_int_ip }}"
{% endif -%}
}

{% if external_url_ssl %}
nginx['listen_port'] = 80
nginx['listen_https'] = false

letsencrypt['enable'] = false
{% endif %}

node_exporter['listen_address'] = '0.0.0.0:9100'

custom_confs = Dir.glob(File.join("/etc/gitlab/", "gitlab.monitor.*.rb"))
custom_confs.each { |conf|
  from_file conf
}
