# Avoid running unnecessary services on the Praefect server
gitaly['enable'] = false
postgresql['enable'] = false
redis['enable'] = false
puma['enable'] = false
sidekiq['enable'] = false
gitlab_workhorse['enable'] = false
prometheus['enable'] = false
alertmanager['enable'] = false
grafana['enable'] = false
gitlab_exporter['enable'] = false
nginx['enable'] = false
gitlab_kas['enable'] = false

# Praefect Configuration
praefect['enable'] = true
praefect['auth_token'] = '{{ praefect_external_token }}'

{% if praefect_ssl %}
praefect['listen_addr'] = nil
praefect['tls_listen_addr'] = "0.0.0.0:{{ praefect_ssl_port }}"
praefect['certificate_path'] = "/etc/gitlab/ssl/praefect_cert.pem"
praefect['key_path'] = "/etc/gitlab/ssl/praefect_key.pem"
{% else %}
praefect['listen_addr'] = '0.0.0.0:2305'
{% endif %}

{% if db_migrate is defined and db_migrate == true %}
praefect['auto_migrate'] = true

praefect['database_host'] = '{{ praefect_postgres_migrations_host }}'
praefect['database_port'] = {{ praefect_postgres_migrations_port }}
{% else %}
praefect['auto_migrate'] = false

praefect['database_host'] = '{{ praefect_postgres_host }}'
praefect['database_port'] = {{ praefect_postgres_port }}
{% endif %}

## Praefect Cache settings
praefect['database_direct_host'] = '{{ praefect_postgres_cache_host }}'
praefect['database_direct_port'] = {{ praefect_postgres_cache_port }}

praefect['database_user'] = '{{ praefect_postgres_username }}'
praefect['database_password'] = '{{ praefect_postgres_password }}'
praefect['database_dbname'] = '{{ praefect_postgres_database_name }}'

praefect['virtual_storages'] = {
  'default' => {
    'nodes' => {
      'gitaly-1' => {
        'address' => "{{ 'tls' if gitaly_ssl else 'tcp' }}://{{ gitaly_primary_int_addr }}:{{ gitaly_ssl_port if gitaly_ssl else '8075' }}",
        'token'   => "{{ praefect_internal_token }}"
      },
{% for ip in gitaly_secondary_int_addrs %}
      'gitaly-{{ loop.index + 1 }}' => {
        'address' => "{{ 'tls' if gitaly_ssl else 'tcp' }}://{{ ip }}:{{ gitaly_ssl_port if gitaly_ssl else '8075' }}",
        'token'   => "{{ praefect_internal_token }}"
      },
{% endfor %}
    }
  }
}

gitlab_rails['rake_cache_clear'] = false
gitlab_rails['auto_migrate'] = false

{% if 'consul' in groups %}
# Consul Agent (Monitoring Auto Discovery)
consul['enable'] = true
consul['configuration'] = {
  bind_addr: '{{ ansible_default_ipv4.address }}',
  retry_join: %w({{ (consul_int_addrs | join(' ')) }})
}
consul['monitoring_service_discovery'] = true
{% endif %}

# Monitoring
praefect['prometheus_listen_addr'] = '0.0.0.0:9652'
node_exporter['listen_address'] = '0.0.0.0:9100'

# Workaround for Sidekiq Cluster which is enabling by default
sidekiq['enable'] = false

custom_confs = Dir.glob(File.join("/etc/gitlab/", "gitlab.praefect.*.rb"))
custom_confs.each { |conf|
  from_file conf
}
