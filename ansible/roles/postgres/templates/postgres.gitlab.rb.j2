{% if groups['postgres'] | length > 1 %}
{% if postgres_replication_manager == 'patroni' %}
# Disable all components except PostgreSQL, Patroni, PgBouncer and Consul
roles ['patroni_role', 'pgbouncer_role']

# Patroni uses one extra slot per node when initiating the replication
patroni['postgresql']['max_replication_slots'] = {{ (((groups['postgres'] | length) * 2) * (geo_replication_slot_modifier | int)) }}
patroni['postgresql']['max_wal_senders'] = {{ (((groups['postgres'] | length) * 2) * (geo_replication_slot_modifier | int)) + 1 }}

patroni['remove_data_directory_on_rewind_failure'] = {{ patroni_remove_data_directory_on_rewind_failure | lower }}
patroni['remove_data_directory_on_diverged_timelines'] = {{ patroni_remove_data_directory_on_diverged_timelines | lower }}

{% if gitlab_version == '' or gitlab_version is version('14.2', '>') %}
patroni['allowlist'] = {{ postgres_md5_auth_cidr_blocks }}
{% endif %}

postgresql['shared_preload_libraries'] = 'pg_stat_statements'

{% if patroni_password is defined %}
patroni['username'] = 'patroni-api'
patroni['password'] = '{{ patroni_password }}'
{% endif %}

{% elif postgres_replication_manager == 'repmgr' %}
# Disable all components except PostgreSQL, Repmgr and Consul
roles ['postgres_role', 'pgbouncer_role']

# Enable Repmgr
postgresql['shared_preload_libraries'] = 'repmgr_funcs, pg_stat_statements'
postgresql['wal_level'] = 'replica'
postgresql['hot_standby'] = 'on'

repmgr['host'] = '{{ ansible_default_ipv4.address }}'
repmgr['trust_auth_cidr_addresses'] = {{ postgres_trust_auth_cidr_blocks }}
repmgr['md5_auth_cidr_addresses'] = {{ postgres_md5_auth_cidr_blocks }}

postgresql['max_wal_senders'] = {{ (groups['postgres'] | length) + 1 }}
postgresql['max_replication_slots'] = {{ (groups['postgres'] | length) + 1 }}
repmgr['master_on_initialization'] = {{ ('postgres_primary' in group_names) | lower }}

{% endif %}

{% else %}
roles ['postgres_role', 'pgbouncer_role']
{% endif %}

{% if postgres_version is defined %}
postgresql['version'] = {{ postgres_version }}
{% elif postgres_replication_manager == 'repmgr' %}
postgresql['version'] = 11
{% endif %}

# PostgreSQL configuration
postgresql['listen_address'] = '0.0.0.0'
postgresql['max_connections'] = 500

postgresql['pgbouncer_user_password'] = "{{ (pgbouncer_password + 'pgbouncer') | md5 }}"
postgresql['sql_user_password'] = "{{ (postgres_password + 'gitlab') | md5 }}"

postgresql['trust_auth_cidr_addresses'] = {{ postgres_trust_auth_cidr_blocks }}
postgresql['md5_auth_cidr_addresses'] = {{ postgres_md5_auth_cidr_blocks }}

gitlab_rails['auto_migrate'] = false

# PgBouncer (for load balancing reads)
pgbouncer['databases'] = {
  gitlabhq_production: {
    host: "127.0.0.1",
    user: "pgbouncer",
    password: "{{ (pgbouncer_password + 'pgbouncer') | md5 }}"
  }
}
pgbouncer['max_db_connections'] = 150

# Consul
{% if groups['postgres'] | length > 1 %}
consul['services'] = %w(postgresql)
{% endif %}
consul['configuration'] = {
  bind_addr: '{{ ansible_default_ipv4.address }}',
  retry_join: %w({{ (consul_int_addrs if 'consul' in groups else gitlab_rails_int_addrs) | join(' ') }})
}
consul['monitoring_service_discovery'] = true

# Monitoring
postgres_exporter['listen_address'] = '0.0.0.0:9187'
node_exporter['listen_address'] = '0.0.0.0:9100'

geo_confs = Dir.glob(File.join("/etc/gitlab/", "gitlab.geo.*.rb"))
geo_confs.each { |conf|
  from_file conf
}

custom_confs = Dir.glob(File.join("/etc/gitlab/", "gitlab.postgres.*.rb"))
custom_confs.each { |conf|
  from_file conf
}
