# Avoid running unnecessary services on the Sidekiq server
gitaly['enable'] = false
postgresql['enable'] = false
redis['enable'] = false
puma['enable'] = false
gitlab_workhorse['enable'] = false
prometheus['enable'] = false
alertmanager['enable'] = false
grafana['enable'] = false
gitlab_exporter['enable'] = false
nginx['enable'] = false

{% if gitlab_version == '' or gitlab_version is version('13.5', '>') %}
gitlab_kas['enable'] = false
{% endif %}

external_url '{{ external_url_sanitised }}'

# Sidekiq Config
sidekiq['enable'] = true
sidekiq['listen_address'] = '0.0.0.0'
sidekiq['max_concurrency'] = {{ sidekiq_max_concurrency }}
sidekiq['queue_groups'] = [
{% for cpu in range(ansible_processor_vcpus) %}
  "*",
{% endfor %}
]

# Ensure UIDs and GIDs match between servers for permissions via NFS
user['uid'] = 9000
user['gid'] = 9000
web_server['uid'] = 9001
web_server['gid'] = 9001

# Monitoring
consul['enable'] = true
consul['configuration'] = {
  bind_addr: '{{ ansible_default_ipv4.address }}',
  retry_join: %w({{ (consul_int_ips if 'consul' in groups else gitlab_rails_int_ips) | join(' ') }})
}
consul['monitoring_service_discovery'] = true

node_exporter['listen_address'] = '0.0.0.0:9100'

# Storage Config
## Object Storage - consolidated object storage configuration

{% if gitlab_object_storage_type == 'object_storage' and cloud_provider != 'none' %}
gitlab_rails['object_store']['enabled'] = true
gitlab_rails['object_store']['proxy_download'] = true

### Provider-specific connection settings
gitlab_rails['object_store']['connection'] = {
  {{ lookup('template', 'object_storage.' + cloud_provider + '.rb.j2') | indent(width=2) }}
}

gitlab_rails['object_store']['objects']['artifacts']['bucket'] = "{{ gitlab_object_storage_artifacts_bucket }}"
gitlab_rails['object_store']['objects']['dependency_proxy']['bucket'] = "{{ gitlab_object_storage_dependency_proxy_bucket }}"
gitlab_rails['object_store']['objects']['external_diffs']['bucket'] = "{{ gitlab_object_storage_external_diffs_bucket }}"
gitlab_rails['object_store']['objects']['lfs']['bucket'] = "{{ gitlab_object_storage_lfs_bucket }}"
gitlab_rails['object_store']['objects']['packages']['bucket'] = "{{ gitlab_object_storage_packages_bucket }}"
gitlab_rails['object_store']['objects']['terraform_state']['bucket'] = "{{ gitlab_object_storage_terraform_state_bucket }}"
gitlab_rails['object_store']['objects']['uploads']['bucket'] = "{{ gitlab_object_storage_uploads_bucket }}"

## Object Storage - separated backups storage
gitlab_rails['backup_upload_connection'] = {
  {{ lookup('template', 'object_storage.' + cloud_provider + '.rb.j2') | indent(width=2) }}
}
gitlab_rails['backup_upload_remote_directory'] = "{{ gitlab_object_storage_backups_bucket }}"
{% elif gitlab_object_storage_type == 'nfs'%}

## NFS - Objects
gitlab_rails['uploads_directory'] = '{{ gitlab_nfs_path }}/uploads'
gitlab_rails['shared_path'] = '{{ gitlab_nfs_path }}/shared'
gitlab_ci['builds_directory'] = '{{ gitlab_nfs_path }}/builds'
{% endif %}

# Components Config
# Redis
{% if redis_external %}
## Redis Non Omnibus (PaaS \ User Provided)
### Combined Queues
gitlab_rails['redis_host'] = '{{ redis_host }}'
gitlab_rails['redis_port'] = '{{ redis_port }}'
gitlab_rails['redis_password'] = '{{ redis_password }}'
gitlab_rails['redis_ssl'] = {{ redis_external_ssl | lower }}

{% elif redis_cache_external and redis_persistent_external %}
### Separate Queues
gitlab_rails['redis_cache_instance'] = '{{ "rediss" if redis_external_ssl else "redis" }}://:{{ redis_cache_password}}@{{ redis_cache_host }}:{{ redis_cache_port }}'
gitlab_rails['redis_queues_instance'] = '{{ "rediss" if redis_external_ssl else "redis" }}://:{{ redis_persistent_password}}@{{ redis_persistent_host }}:{{ redis_persistent_port }}'
gitlab_rails['redis_shared_state_instance'] = '{{ "rediss" if redis_external_ssl else "redis" }}://:{{ redis_persistent_password}}@{{ redis_persistent_host }}:{{ redis_persistent_port }}'
gitlab_rails['redis_actioncable_instance'] = '{{ "rediss" if redis_external_ssl else "redis" }}://:{{ redis_persistent_password}}@{{ redis_persistent_host }}:{{ redis_persistent_port }}'

{% elif 'redis' in groups %}
## Redis Omnibus - Separate Node(s)
### Combined Queues
{% if groups['redis'] | length == 1 %}
#### Separate Single Node
gitlab_rails['redis_port'] = '{{ redis_port }}'
gitlab_rails['redis_host'] = '{{ redis_host }}'
gitlab_rails['redis_password'] = '{{ redis_password }}'
{% elif groups['redis'] | length > 1 %}
#### Separate Multi Node
redis['master_name'] = 'gitlab-redis'
redis['master_password'] = '{{ redis_password }}'

gitlab_rails['redis_sentinels'] = [
{% for ip in redis_int_ips %}
  {host: '{{ ip }}', port: {{ redis_sentinel_port }}},
{% endfor %}
]
{% endif %}
{% elif 'redis_cache' in groups and 'redis_persistent' in groups %}
### Separate Queues
#### Separate Multi Node
gitlab_rails['redis_cache_instance'] = 'redis://:{{ redis_cache_password }}@gitlab-redis-cache'
gitlab_rails['redis_queues_instance'] = 'redis://:{{ redis_persistent_password }}@gitlab-redis-persistent'
gitlab_rails['redis_shared_state_instance'] = 'redis://:{{ redis_persistent_password }}@gitlab-redis-persistent'
gitlab_rails['redis_actioncable_instance'] = 'redis://:{{ redis_persistent_password }}@gitlab-redis-persistent'

gitlab_rails['redis_cache_sentinels'] = [
{% for ip in redis_cache_int_ips %}
  {host: '{{ ip }}', port: {{ redis_sentinel_port }}},
{% endfor %}
]
gitlab_rails['redis_queues_sentinels'] = [
{% for ip in redis_persistent_int_ips %}
  {host: '{{ ip }}', port: {{ redis_sentinel_port }}},
{% endfor %}
]
gitlab_rails['redis_shared_state_sentinels'] = [
{% for ip in redis_persistent_int_ips %}
  {host: '{{ ip }}', port: {{ redis_sentinel_port }}},
{% endfor %}
]
gitlab_rails['redis_actioncable_sentinels'] = [
{% for ip in redis_persistent_int_ips %}
  {host: '{{ ip }}', port: {{ redis_sentinel_port }}},
{% endfor %}
]
{% endif %}

# Postgres \ Database
{% if postgres_external %}
gitlab_rails['db_host'] = '{{ postgres_host }}'
gitlab_rails['db_port'] = '{{ postgres_port }}'
gitlab_rails['db_username'] = '{{ postgres_username }}'
gitlab_rails['db_password'] = '{{ postgres_password }}'
gitlab_rails['db_database'] = '{{ postgres_database_name }}'

{% if postgres_load_balancing_hosts | length > 0 and not (gitlab_version != '' and gitlab_version is version('14.1', '<')) %} %}
gitlab_rails['db_load_balancing'] = { 'hosts' => {{ postgres_load_balancing_hosts }} }
{% endif %}

{% elif 'postgres' in groups %}
gitlab_rails['db_host'] = '{{ internal_lb_host }}'
gitlab_rails['db_port'] = 6432
gitlab_rails['db_password'] = '{{ postgres_password }}'

{% if groups['postgres'] | length > 1 %}
gitlab_rails['db_load_balancing'] = { 'hosts' => {{ postgres_int_ips }} }
{% endif %}

{% endif %}

gitlab_rails['auto_migrate'] = false

gitlab_rails['env'] = {
  # Sidekiq Memory Killer - Disabled by default due to https://gitlab.com/gitlab-org/gitlab/-/issues/225909
  "SIDEKIQ_MEMORY_KILLER_MAX_RSS" => {{ sidekiq_memory_killer_max_rss }}

{% if 'jaeger' in groups %}
  # Jaeger
  "GITLAB_TRACING" => "opentracing://jaeger?http_endpoint=http%3A%2F%2F{{ jaeger_int_ip }}%3A14268%2Fapi%2Ftraces&sampler=const&sampler_param=0.1"
{% endif %}
}

# Gitaly
{% if 'praefect' in groups %}
## Gitaly Cluster - Separate Node(s)
gitaly['enable'] = false
git_data_dirs({
  "default" => {
    "gitaly_address" => "tcp://{{ internal_lb_host }}:2305",
    "gitaly_token" => '{{ praefect_external_token }}'
  }
})
{% elif 'gitaly' in groups %}
## Gitaly - Separate Node(s)
gitaly['enable'] = false
gitlab_rails['gitaly_token'] = '{{ gitaly_token }}'

git_data_dirs({
  'default' => { 'gitaly_address' => 'tcp://{{ gitaly_primary_int_ip }}:8075' },
  'storage1' => { 'gitaly_address' => 'tcp://{{ gitaly_primary_int_ip }}:8075' },
{% for gitaly_secondary_ip in gitaly_secondary_int_ips %}
  "storage{{loop.index + 1}}" => { 'gitaly_address' => 'tcp://{{ gitaly_secondary_ip }}:8075' },
{% endfor %}
})
{% endif %}

geo_confs = Dir.glob(File.join("/etc/gitlab/", "gitlab.geo.*.rb"))
geo_confs.each { |conf|
  from_file conf
}

custom_confs = Dir.glob(File.join("/etc/gitlab/", "gitlab.sidekiq.*.rb"))
custom_confs.each { |conf|
  from_file conf
}
