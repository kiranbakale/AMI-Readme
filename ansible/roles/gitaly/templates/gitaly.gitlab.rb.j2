# Avoid running unnecessary services on the Gitaly server
postgresql['enable'] = false
redis['enable'] = false
puma['enable'] = false
sidekiq['enable'] = false
gitlab_workhorse['enable'] = false
prometheus['enable'] = false
alertmanager['enable'] = false
grafana['enable'] = false
gitlab_exporter['enable'] = false
nginx['enable'] = false

{% if gitlab_version == '' or gitlab_version is version('13.5', '>') %}
gitlab_kas['enable'] = false
{% endif %}

# Prevent database connections during 'gitlab-ctl reconfigure'
gitlab_rails['rake_cache_clear'] = false
gitlab_rails['auto_migrate'] = false

gitlab_rails['internal_api_url'] = '{{ gitaly_callback_internal_api_url }}'

{% if gitaly_ssl %}
gitaly['tls_listen_addr'] = "0.0.0.0:{{ gitaly_ssl_port }}"
gitaly['certificate_path'] = "/etc/gitlab/ssl/gitaly_cert.pem"
gitaly['key_path'] = "/etc/gitlab/ssl/gitaly_key.pem"
{% else %}
gitaly['listen_addr'] = "0.0.0.0:8075"
{% endif %}

gitaly['ruby_num_workers'] = {{ gitaly_ruby_num_workers }}
gitaly['pack_objects_cache_enabled'] = {{ gitaly_pack_objects_cache | lower }}

{% if 'consul' in groups %}
# Consul Agent (Monitoring Auto Discovery)
consul['enable'] = true
consul['configuration'] = {
  bind_addr: '{{ ansible_default_ipv4.address }}',
  retry_join: %w({{ (consul_int_addrs | join(' ')) }})
}
consul['monitoring_service_discovery'] = true
{% endif %}

node_exporter['listen_address'] = '0.0.0.0:9100'
gitaly['prometheus_listen_addr'] = "0.0.0.0:9236"

{% if 'praefect' in groups %}
gitaly['auth_token'] = '{{ praefect_internal_token }}'

git_data_dirs({
  "gitaly-{{ gitaly_number }}" => {
    "path" => "{{ gitaly_cluster_storage_path }}"
  }
})

{% else %}
gitaly['auth_token'] = '{{ gitaly_token }}'

git_data_dirs({
{% if 'gitaly_primary' in group_names %}
  "default" => { "path" => "{{ gitaly_sharded_storage_path }}/default" },
{% endif %}
  "storage{{ gitaly_number }}" => { 'path' => "{{ gitaly_sharded_storage_path }}/storage{{ gitaly_number }}" },
})
{% endif %}

custom_confs = Dir.glob(File.join("/etc/gitlab/", "gitlab.gitaly.*.rb"))
custom_confs.each { |conf|
  from_file conf
}
