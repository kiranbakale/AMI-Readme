---
prometheus:
  enabled: true
  prometheusSpec:
    replicas: 1
    walCompression: true
    nodeSelector:
      workload: support
    storageSpec:
      volumeClaimTemplate:
        spec:
{% if kube_prometheus_stack_charts_storage_class != '' %}
          storageClassName: "{{ kube_prometheus_stack_charts_storage_class }}"
{% endif %}
          resources:
            requests:
              storage: "{{ kube_prometheus_stack_charts_storage_size }}"
    scrapeInterval: 15s
    scrapeTimeout: 15s
    evaluationInterval: 1m
    retention: 30d
    podMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
    additionalScrapeConfigs:
{% if kube_prometheus_stack_charts_prometheus_scrape_config_setup %}
{% if 'consul' in groups %}
      {{ lookup('template', 'prometheus_scrape_configs/consul_omnibus.yml.j2') | indent(width=6) }}
{% else %}
      {{ lookup('template', 'prometheus_scrape_configs/static_omnibus.yml.j2') | indent(width=6) }}
{% endif %}
      {{ lookup('template', 'prometheus_scrape_configs/static_omnibus_non_discoverable.yml.j2') | indent(width=6) }}
      {{ lookup('template', 'prometheus_scrape_configs/static_non_omnibus.yml.j2') | indent(width=6) }}
{% endif %}
{% for custom in kube_prometheus_stack_charts_custom_scrape_config %}
      - {{ custom }}
{% endfor %}

kube-state-metrics:
  nodeSelector:
    workload: support

prometheusOperator:
  nodeSelector:
    workload: support

grafana:
  enabled: true
  image:
    tag: "{{ kube_prometheus_stack_charts_grafana_image_tag }}"
  nodeSelector:
    workload: support
  admin:
    existingSecret: gitlab-grafana-initial-password
    userKey: username
    passwordKey: password
  ingress:
    enabled: true
    ingressClassName: 'gitlab-nginx'
    hosts: ["{{ external_host }}"]
    path: '/-/grafana'
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: '0'  # Disables client body size limit, needed for Grafana dashboard exports
  grafana.ini:
    server:
      domain: "{{ external_host }}"
      root_url: "{{ external_url}}/-/grafana"
      serve_from_sub_path: true
    auth:
      login_cookie_name: gitlab_grafana_session
  defaultDashboardsEnabled: false
  sidecar:
    dashboards:
      enabled: true
      label: gitlab_grafana_dashboard
      labelValue: "true"
      folderAnnotation: gitlab_grafana_folder
      provider:
        foldersFromFilesStructure: true

{% if cloud_provider == 'gcp' %}
coreDns:
  enabled: false
kubeDns:
  enabled: true
{% endif %}

# Alertmanager
alertmanager:
  enabled: false
defaultRules:
  create: false
kubeControllerManager:
  enabled: false
kubeScheduler:
  enabled: false
kubeProxy:
  enabled: false
